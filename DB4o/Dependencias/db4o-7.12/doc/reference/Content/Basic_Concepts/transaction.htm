<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Basic Concepts" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Transaction	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../Resources/Code/prettify.js">
        </script>
        <script src="../Resources/Code/lang-vb.js">
        </script>
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../index_CSH.html#Basic_Concepts/transaction.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../Basic_Concepts.htm">Basic Concepts</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Transaction</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor13"></a>Transaction</h1>
        <p>All work within db4o <MadCap:conditionalText MadCap:conditions="Primary.Java">ObjectContainer</MadCap:conditionalText> is transactional. A transaction is implicitly started when you open a container, and the current transaction is implicitly committed when you close it again. db4o transaction is tied to  an open object container and only one transaction is allowed per object container instance. </p><a name="Commit And Rollback"></a>
        <h2>Commit And Rollback</h2>
        <p>You may choose to make a commit explicit or you may leave it for the <code>#close()</code> call:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">TransactionExample.java: storeCarCommit
private static void storeCarCommit(ObjectContainer container)  {
        Pilot pilot=new Pilot("Rubens Barrichello",99);
        Car car=new Car("BMW");
        car.setPilot(pilot);
        container.store(car);
        container.commit();
    }</pre>
            <pre class="prettyprint" xml:space="preserve">TransactionExample.java: listAllCars
private static void listAllCars(ObjectContainer container)  {
        ObjectSet result=container.queryByExample(Car.class);
        listResult(result);
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>Before transaction is commited all the modifications to a database are written to a <a href="acid_model/acid_properties_for_db4o.htm">temporary memory storage</a>. Commit (explicit or implicit) writes the modifications to the disk.</p>
        <p>Please, remember to always commit or close your <MadCap:conditionalText MadCap:conditions="Primary.Java">ObjectContainer</MadCap:conditionalText> when the work is done, to make sure that the data is saved to the permanent storage. <a href="../tuning/performance_hints/commit_strategies.htm">Commit Strategies</a> contains some important information on when and how commit should be used to achieve the best performance. </p>
        <p>If you do not want to save changes to the database, you can call rollback, resetting the state of our database to the last commit point.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">TransactionExample.java: storeCarRollback
private static void storeCarRollback(ObjectContainer container)  {
        Pilot pilot=new Pilot("Michael Schumacher",100);
        Car car=new Car("Ferrari");
        car.setPilot(pilot);
        container.store(car);
        container.rollback();
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Refresh Live Objects"></a>
        <h2><a name="kanchor14"></a>Refresh Live Objects</h2>
        <p>There is one thing that you should remember when rolling back: the <code>#rollback()</code> method will cancel the modifications, but it won't change back the state of the objects in your reference cache.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">TransactionExample.java: carSnapshotRollback
private static void carSnapshotRollback(ObjectContainer container)  {
        ObjectSet result=container.queryByExample(new Car("BMW"));
        Car car=(Car)result.next();
        car.snapshot();
        container.store(car);
        container.rollback();
        System.out.println(car);
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>You have to explicitly refresh your live objects when their state might become different from the state in the database:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">TransactionExample.java: carSnapshotRollbackRefresh
private static void carSnapshotRollbackRefresh(ObjectContainer container)  {
        ObjectSet result=container.queryByExample(new Car("BMW"));
        Car car=(Car)result.next();
        car.snapshot();
        container.store(car);
        container.rollback();
        container.ext().refresh(car,Integer.MAX_VALUE);
        System.out.println(car);
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>The <code>#refresh()</code> method might be also helpful when the changes to the database are done from different threads. See <a href="../client-server.htm">Client-Server</a> for more information.</p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="transactionjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>