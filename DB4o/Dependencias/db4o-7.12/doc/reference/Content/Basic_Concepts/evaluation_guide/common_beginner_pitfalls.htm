<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Basic Concepts|Evaluation Guide" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Common Beginner Pitfalls	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#Basic_Concepts/evaluation_guide/common_beginner_pitfalls.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../Basic_Concepts.htm">Basic Concepts</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../evaluation_guide.htm">Evaluation Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Common Beginner Pitfalls</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Common Beginner Pitfalls</h1>
        <p>The biggest trouble for users starting to use db4o is to
realize that it is not a relational database. In db4o object identity and links
between objects are managed thought the object model and are actually memory
references to instantiated objects. The idea of a primary key is not necessary
for db4o as any object can be present in memory only once and thus is
identified by the variable holding the reference. For more information about
the differences between db4o and relational databases see <a href="../database_models/object_and_relational_model_comparison.htm">Object And Relational Model Comparison</a>.</p>
        <p>Another concept that should be well understood by the db4o
beginners is the concept of activation, i.e. object loading into the memory.
When an object is loaded into the memory after the query was executed its field
objects should be available to the user as well. However it might be a recipe
for a trouble if an object has a deep structure, for example if it is a linked
list. In this case it makes sense to load only the objects that will be
accessed by the user. For more information about it see <a href="../../object_lifecycle/activation.htm">Activation</a>.</p>
        <p>Related to activation is the problem of update. When an
object is restored to the database, it is important to store the modifications
in the field objects, as they might be the only values that were changed.
However, it can produce a serious performance penalty if the actual
modification was only in the top-level and the object contains a deep field
structure (i.e. all objects in the graph will have to be updated). This problem
is solved similarly to activation problem. For more information see <a href="../../object_lifecycle/transparent_persistence.htm">Transparent Persistence</a>.</p>
        <p>Another common beginner's mistake is overuse of commit. Commit
is an important database operation, which ensures that all the changes were
actually written to a physical storage and are safe there, however commit is also
one of the most common performance bottlenecks. Db4o uses commit to physically
write data to the physical storage. This operation requires several cycles of
disk access, which ensure <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../acid_model.htm">ACID<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> transaction, and can be very slow depending on
your storage hardware. For more information see <a href="../../tuning/performance_hints/commit_strategies.htm">Commit Strategies</a>.</p>
        <p>Other common db4o pitfalls are listed in <a href="../../usage_pitfalls.htm">Usage Pitfalls </a>chapter of db4o documentation.</p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>