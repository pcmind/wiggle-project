<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Object Lifecycle|Transparent Persistence" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Transparent Persistence Example</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#object_lifecycle/transparent_persistence/transparent_persistence_example.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../object_lifecycle.htm">Object Lifecycle</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../transparent_persistence.htm">Transparent Persistence</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Example</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Transparent Persistence Example</h1>
        <p>In order to support <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../activation/transparent_activation_framework.htm">TA<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span>, the objects which are stored in the database need to implement the <span class="PrimaryActivatable">Activatable</span>-interface.</p>
        <p>Then the class need a field to keep the activator of that instance. This field is only used by the transparent activation. Therefore it is marked as transient, so that it isn't stored in the database.&#160;</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">import com.db4o.activation.ActivationPurpose;
import com.db4o.activation.Activator;
import com.db4o.ta.Activatable;

public class Person implements Activatable{

    private transient Activator activator;</pre>
            <div class="codesnippet-meta">Person.java: Implement the required activatable interface and add activator<a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Example Code</a></div>
        </div>
        <p>After that implement the two method of the <span class="PrimaryActivatable">Activatable</span>-interface. The bind-method binds an activator to the object. It's called by the transparent activation framework. The activate-method needs to be called before any read or write operation on the object. Since this two methods are always the same code, you can move the implementation to a common super class or to a static utility class.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">public void bind(Activator activator) {
    if (this.activator == activator) {
        return;
    }
    if (activator != null &amp;&amp; null != this.activator) {
        throw new IllegalStateException("Object can only be bound to one activator");
    }
    this.activator = activator;
}

public void activate(ActivationPurpose activationPurpose) {
    if(null!=activator){
        activator.activate(activationPurpose);
    }
}</pre>
            <div class="codesnippet-meta">Person.java: Implement the activatable interface methods<a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Example Code</a></div>
        </div>
        <p>Now the important part. Every time a field of the class is accessed you need to call the activate-method with the purpose. For example in every <span class="Primarygetter/setter">getter/setter</span> or other method. Probably the best way is to use only      <![CDATA[ ]]><span class="Primarygetter/setter">getter/setter</span> <![CDATA[ ]]>even within the class to access fields. And the <span class="Primarygetter/setter">getter/setter</span> ensure that the activate-method is called.</p>
        <p> Implementing the <span class="PrimaryActivatable">Activatable</span>-interface by hand for every class is repetitive and error prone. That's why this process can be automated. <a href="tp_enhanced_example.htm" target="" title="" alt="" class="MCXref">See "TP Enhancement"</a></p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">public void setName(String name) {
    activate(ActivationPurpose.WRITE);
    this.name = name;
}

public String getName()  {
    activate(ActivationPurpose.READ);
    return name;
}

public String toString()  {
    // use the getter/setter withing the class,
    // to ensure the activate-method is called
    return getName();
}</pre>
            <div class="codesnippet-meta">Person.java: Call the activate method on every field access<a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Example Code</a></div>
        </div>
        <p>The last step is to enable transparent activation via configuration.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().add(new TransparentPersistenceSupport());
ObjectContainer container = Db4oEmbedded.openFile(configuration, DATABASE_FILE_NAME);</pre>
            <div class="codesnippet-meta">TransparentActivationExamples.java: Activate transparent activation<a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Example Code</a></div>
        </div>
        <p>Now transparent activation is enabled. You have to store the object only once initially. After that, changes are automatically stored on the commit call.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">{
    ObjectContainer container = openDatabase();
    Person person = Person.personWithHistory();
    container.store(person);
    container.close();
}
{
    ObjectContainer container = openDatabase();
    Person person = queryByName(container,"Joanna the 10");
    Person beginOfDynasty = person.getMother();

    // With transparent persistence enabled, you can navigate deeply
    // nested object graphs. db4o will ensure that the objects
    // are loaded from the database.
    while(null!=beginOfDynasty.getMother()){
        beginOfDynasty = beginOfDynasty.getMother();
    }
    System.out.println(beginOfDynasty.getName());

    // Updating a object doesn't requires no store call.
    // Just change the objects and the call commit.
    beginOfDynasty.setName("New Name");
    container.commit();
    container.close();
}
{
    ObjectContainer container = openDatabase();
    Person person = queryByName(container,"New Name");
    // The changes are stored, due to transparent persistence
    System.out.println(person.getName());
    container.close();
}</pre>
            <div class="codesnippet-meta">TransparentActivationExamples.java: Transparent persistence in action<a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Example Code</a></div>
        </div>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>