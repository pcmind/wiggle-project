<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Object Lifecycle|Querying|Query Modes" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Lazy Queries	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#object_lifecycle/querying/query_modes/lazy_queries.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../object_lifecycle.htm">Object Lifecycle</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../querying.htm">Querying</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../query_modes.htm">Query Modes</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Lazy Queries</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor31"></a>Lazy Queries</h1>
        <P>In Lazy Querying mode objects are not evaluated at all, instead of this an iterator is created against the best index found. Further query processing (including all index processing) will happen when the user application iterates through the resulting <CODE>ObjectSet</CODE>. This allows you to get the first query results almost immediately.</P>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryModesExample.java: testLazyQueries
private static void testLazyQueries()  {
    System.out
        .println(
"Testing query performance on 10000 pilot objects in Lazy mode");
    fillUpDB(10000);
    Configuration configuration = Db4o.newConfiguration();
    configuration.queries().evaluationMode(QueryEvaluationMode.LAZY);
    ObjectContainer container = Db4o.openFile(configuration, DB4O_FILE_NAME);
    try  {
      QueryStats stats = new QueryStats();
      stats.connect(container);
      Query query = container.query();
      query.constrain(Pilot.class);
      query.descend("points").constrain(99).greater();
      query.execute();
      long executionTime = stats.executionTime();
      System.out.println("Query execution time: "
          + executionTime);
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <P>In addition to the very fast execution this method also ensures very small memory consumption, as lazy queries do not need an intermediate representation as a set of IDs in memory. With this approach a lazy query ObjectSet does not have to cache a single object or <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../../implementation_strategies/ids_and_uuids/internal_ids.htm">ID<img style="border: none;margin-left: 5px;" src="../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span>. The memory consumption for a query is practically zero, no matter how large the resultset is going to be.</P>
        <P>There are some interesting effects appearing due to the fact that the objects are getting evaluated only on a request. It means that all the committed modifications from the other transactions and uncommitted modifications from the same transaction will be taken into account when delivering the result objects:</P>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryModesExample.java: testLazyConcurrent
private static void testLazyConcurrent()  {
    System.out
        .println("Testing lazy mode with concurrent modifications");
    fillUpDB(10);
    Configuration configuration = Db4o.newConfiguration();
    configuration.queries().evaluationMode(QueryEvaluationMode.LAZY);
    ObjectContainer container = Db4o.openFile(configuration, DB4O_FILE_NAME);
    try  {
      Query query1 = container.query();
      query1.constrain(Pilot.class);
      query1.descend("points").constrain(5).smaller();
      ObjectSet result1 = query1.execute();

      Query query2 = container.query();
      query2.constrain(Pilot.class);
      query2.descend("points").constrain(1);
      ObjectSet result2 = query2.execute();
      Pilot pilotToDelete = (Pilot) result2.queryByExample(0);
      System.out.println("Pilot to be deleted: "
          + pilotToDelete);
      container.delete(pilotToDelete);
      Pilot pilot = new Pilot("Tester", 2);
      System.out.println("Pilot to be added: " + pilot);
      container.store(pilot);

      System.out
          .println("Query result after changing from the same transaction");
      listResult(result1);
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Pros and Cons for Lazy Queries"></a>
        <H2>Pros and Cons for Lazy Queries</H2>
        <P>Pros:</P>
        <UL>
            <LI value="1">The call to <CODE>Query.execute()</CODE> will return very fast. First results can be made available to the application before the query is fully processed.</LI>
            <LI value="2">A query will consume hardly any memory at all because no intermediate ID representation is ever created.</LI>
        </UL>
        <P>Cons:</P>
        <UL>
            <LI value="1">Lazy queries check candidates when iterating through the resulting <CODE>ObjectSet</CODE>. In doing so the query processor takes changes into account that may have happened since the Query.execute() call: committed changes from other transactions, <B>and uncommitted changes from the calling transaction</B>. There is a wide range of possible side effects:</LI>
            <UL>
                <LI value="1">The underlying index may have changed. </LI>
                <LI value="2">Objects themselves may have changed in the meanwhile. </LI>
                <LI value="3">There even is a chance of creating an endless loop. If the caller iterates through the <CODE>ObjectSet</CODE> and changes each object in a way that it is placed at the end of the index, the same objects can be revisited over and over. </LI>
            </UL>
            <B>In lazy mode it can make sense to work in a way one would work with collections to avoid concurrent modification exceptions.</B> For instance one could iterate through the <CODE>ObjectSet</CODE> first and store all the objects to a temporary collection representation before changing objects and storing them back to db4o. 
<LI value="2">Some method calls against a lazy <CODE>ObjectSet</CODE> will require the query processor to create a snapshot or to evaluate the query fully. An example of such a call is <CODE>ObjectSet.size()</CODE>.</LI></UL>
        <P>Lazy mode can be an excellent choice for single transaction read use, to keep memory consumption as low as possible.</P>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>