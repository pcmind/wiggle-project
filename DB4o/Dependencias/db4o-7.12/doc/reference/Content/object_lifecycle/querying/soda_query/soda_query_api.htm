<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Object Lifecycle|Querying|SODA Query" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>SODA Query API	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#object_lifecycle/querying/soda_query/soda_query_api.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../object_lifecycle.htm">Object Lifecycle</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../querying.htm">Querying</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../soda_query.htm">SODA Query</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">SODA Query API</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor29"></a>SODA Query API</h1>
        <p>There are occasions when we don't want to query for exact field values, 
but rather for value ranges, objects not containing given member values, etc. 
This functionality is provided by the Constraint API.</p><a name="Not"></a>
        <h3>Not </h3>
        <p>First, let's negate 
a query to find all pilots who are not Michael Schumacher:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryExample.java: retrieveByNegation
private static void retrieveByNegation(ObjectContainer container)  {
    Query query = container.query();
    query.constrain(Pilot.class);
    query.descend("name").constrain("Michael Schumacher").not();
    ObjectSet result = query.execute();
    listResult(result);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="And "></a>
        <h3>And </h3>
        <p>Where there is negation, the other boolean operators can't be too far. </p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryExample.java: retrieveByConjunction
private static void retrieveByConjunction(ObjectContainer container)  {
    Query query = container.query();
    query.constrain(Pilot.class);
    Constraint constr = query.descend("name").constrain(
        "Michael Schumacher");
    query.descend("points").constrain(new Integer(10))
        .and(constr);
    ObjectSet result = query.execute();
    listResult(result);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Or "></a>
        <h3>Or </h3>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryExample.java: retrieveByDisjunction
private static void retrieveByDisjunction(ObjectContainer container)  {
    Query query = container.query();
    query.constrain(Pilot.class);
    Constraint constr = query.descend("name").constrain(
        "Michael Schumacher");
    query.descend("points").constrain(new Integer(99)).or(constr);
    ObjectSet result = query.execute();
    listResult(result);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Greater, Smaller, Equal &lt;&gt;="></a>
        <h3>Greater, Smaller, Equal &lt;&gt;=</h3>
        <p>We can also constrain to a comparison with a given value.</p>
        <p>Return pilots with more than 99 points:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryExample.java: retrieveByComparison
private static void retrieveByComparison(ObjectContainer container)  {
    Query query = container.query();
    query.constrain(Pilot.class);
    query.descend("points").constrain(new Integer(99)).greater();
    ObjectSet result = query.execute();
    listResult(result);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Using Default Values "></a>
        <h3>Using Default Values </h3>
        <p>The query API also allows to query for field default values. </p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryExample.java: retrieveByDefaultFieldValue
private static void retrieveByDefaultFieldValue(
      ObjectContainer container)  {
    Pilot somebody = new Pilot("Somebody else", 0);
    container.store(somebody);
    Query query = container.query();
    query.constrain(Pilot.class);
    query.descend("points").constrain(new Integer(0));
    ObjectSet result = query.execute();
    listResult(result);
    container.delete(somebody);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="String Comparisons"></a>
        <h3>String Comparisons</h3><a name="Like "></a>
        <h4>Like and Contains</h4>
        <p>This is an equivalent to SQL "like" operator. The contains()-method is case sensitive whereas like() is case-insensitive.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">SodaExample.java: testLike
public static void testLike()  {
    new File(DB4O_FILE_NAME).delete();
    ObjectContainer container = database();
    if (container != null)  {
      try  {
        Pilot pilot = new Pilot("Test Pilot1", 100);
        container.store(pilot);
        pilot = new Pilot("Test Pilot2", 102);
        container.store(pilot);
        
		// Simple query
		Query query1 = container.query();
		query1.constrain(Pilot.class);
		query1.descend("name").constrain("est");
		ObjectSet result = query1.execute();
		listResult(result);

		// contains query: contains is case sensitive
		Query query2 = container.query();
		query2.constrain(Pilot.class);
		// All pilots with the name containing "est" will be retrieved
		query2.descend("name").constrain("est").contains();
		result = query2.execute();
		listResult(result);
			
		// Like query: like is case insensitive
		Query query3 = container.query();
		query3.constrain(Pilot.class);
		// All pilots with the name containing "est" will be retrieved
		query3.descend("name").constrain("est").like();
		result = query3.execute();
		listResult(result);
      } catch (Db4oException ex)  {
        System.out.println("Db4o Exception: " + ex.getMessage());
      } catch (Exception ex)  {
        System.out.println("System Exception: " + ex.getMessage());
      } finally  {
        closeDatabase();
      }
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="startsWith, endsWith "></a>
        <h4>startsWith, endsWith </h4>
        <p>Compares a beginning or ending of a string:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">SodaExample.java: testStartsEnds
public static void testStartsEnds()  {
    new File(DB4O_FILE_NAME).delete();
    ObjectContainer container = database();
    if (container != null)  {
      try  {
        Pilot pilot = new Pilot("Test Pilot0", 100);
        container.store(pilot);
        pilot = new Pilot("Test Pilot1", 101);
        container.store(pilot);
        pilot = new Pilot("Test Pilot2", 102);
        container.store(pilot);
        
        Query query = container.query();
        query.constrain(Pilot.class);
        query.descend("name").constrain("T0").endsWith(false).not();
        // query.descend("name").constrain("Pil").startsWith(true);
        ObjectSet result = query.execute();
        listResult(result);
      } catch (Db4oException ex)  {
        System.out.println("Db4o Exception: " + ex.getMessage());
      } catch (Exception ex)  {
        System.out.println("System Exception: " + ex.getMessage());
      } finally  {
        closeDatabase();
      }
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Case Insensitive Queries"></a>
        <h4>Case Insensitive Queries</h4>
        <p>By default all string querying
functions use case-sensitive comparison. <code>startsWith</code> and
<code>endsWith</code> allow to switch between comparison modes using a
parameter. However, if you need a case-insensitive comparison for
<code>like</code> , <code>equals</code> or <code>contains</code>queries, it is recommended to use <a href="../native_queries.htm">Native Queries</a> as SODA does
not provide such an option. </p><a name="Contains "></a>
        <h3>Collections and Arrays</h3>
        <p>You can query for a certain element in a collection or array. Descend down to the collection field and apply a constrain for the object you're looking for.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">SodaExample.java: testContains
public static void testContains()  {
    new File(DB4O_FILE_NAME).delete();
    ObjectContainer container = database();
    if (container != null)  {
      try  {
        ArrayList list = new ArrayList();
        Pilot pilot1 = new Pilot("Test 1", 1);
        list.add(pilot1);
        Pilot pilot2 = new Pilot("Test 2", 2);
        list.add(pilot2);
        Team team = new Team("Ferrari", list);
        container.store(team);
        
        Query query = container.query();
        query.constrain(Team.class);
        query.descend("pilots").constrain(pilot2);
        ObjectSet result = query.execute();
        listResult(result);
      } catch (Db4oException ex)  {
        System.out.println("Db4o Exception: " + ex.getMessage());
      } catch (Exception ex)  {
        System.out.println("System Exception: " + ex.getMessage());
      } finally  {
        closeDatabase();
      }
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Identity Comparison "></a>
        <h3>Identity Comparison </h3>
        <p>db4o database identity can also be used as a constraint. In this
case only objects with the same database instance will be retrieved:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">SodaExample.java: testIdentity
public static void testIdentity()  {
    new File(DB4O_FILE_NAME).delete();
    ObjectContainer container = database();
    if (container != null)  {
      try  {
        Pilot pilot = new Pilot("Test Pilot1", 100);
        Car car = new Car("BMW", pilot);
        container.store(car);
        // Change the name, the pilot instance stays the same
        pilot.setName("Test Pilot2");
        // create a new car
        car = new Car("Ferrari", pilot);
        container.store(car);
        
        // Simple Query: 
        Query query1 = container.query();
        query1.constrain(Car.class);
        query1.descend("_pilot").constrain(pilot);
        ObjectSet result = query1.execute();
        listResult(result);
        
        // identity query:
        Query query2 = container.query();
        query2.constrain(Car.class);
        // All cars having pilot with the same database identity
        // will be retrieved. As we only created Pilot object once
        // it should mean all car objects
        query2.descend("_pilot").constrain(pilot).identity();
        result = query2.execute();
        listResult(result);
      } catch (Db4oException ex)  {
        System.out.println("Db4o Exception: " + ex.getMessage());
      } catch (Exception ex)  {
        System.out.println("System Exception: " + ex.getMessage());
      } finally  {
        closeDatabase();
      }
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Sorting Results "></a>
        <h3>Sorting Results </h3>
        <p>It is also possible to have db4o sort the results.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryExample.java: retrieveSorted
private static void retrieveSorted(ObjectContainer container)  {
    Query query = container.query();
    query.constrain(Pilot.class);
    query.descend("name").orderAscending();
    ObjectSet result = query.execute();
    listResult(result);
    query.descend("name").orderDescending();
    result = query.execute();
    listResult(result);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Joining Constraints"></a>
        <h3>Joining Constraints</h3>
        <p>In some situations you need a way to arbitrarily join constraints, for example:</p>
        <p>(a and b) or (c and d) </p>
        <p>In this case you will just need to add new constraints to the root constraint and join them in advance using Constraint syntax:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryExample.java: retrieveByJoinedConstraints
private static void retrieveByJoinedConstraints(ObjectContainer container)  {
    Query query = container.query();
    query.constrain(Pilot.class);
    Constraint constr1 = query.descend("name").constrain(
        "Michael Schumacher");
    Constraint constr2 = query.descend("points").constrain(
    new Integer(100)).and(constr1);
    
    Constraint constr3 = query.descend("name").constrain(
    "Rubens Barrichello");
    
    query.descend("points").constrain(
        new Integer(99)).and(constr3).or(constr2);
    
    ObjectSet result = query.execute();
    listResult(result);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>All these techniques can be combined arbitrarily, of course. Please try it out. 
There still may be cases left where the predefined query API constraints may not 
be sufficient - don't worry, you can always let db4o run any arbitrary code that 
you provide in an Evaluation. Evaluations will be discussed in a <a href="../soda_evaluations.htm">Evaluations chapter</a>. </p>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>