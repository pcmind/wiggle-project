<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Object Lifecycle|Querying|SODA Query" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>SODA Query Engine	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#object_lifecycle/querying/soda_query/soda_query_engine.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../object_lifecycle.htm">Object Lifecycle</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../querying.htm">Querying</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../soda_query.htm">SODA Query</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">SODA Query Engine</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>SODA Query Engine</h1>
        <p>Query Processor operates in two stages:</p>
        <p>1. In a first stage it creates a tree of candidate object IDs using an
index. The Best index is searched, which means a field index for field
constraints (if available), which returns the smallest candidate result set. Field index allows to create often smaller
candidate tree, already filtered on some criteria. If the best index is not
found, class index is used to create a candidate tree of all instances of
matching class or classes.</p>
        <p>2. In a second stage, all candidates are run against the SODA processor to
run all constraints against all objects, whether the field of a constraint is
indexed or not.</p>
        <p>The first stage of the query processor operates directly on
BTrees. BTrees are used for class indexes (always), and field indexes
(configurable).</p>
        <p>BTree algebra may create unions and intersections (and, or,
greater, smaller) between BTree ranges, working with pointers
into BTrees without ever having to scan through all index entries. A BTree
node points to the object's file positions through object <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../../implementation_strategies/ids_and_uuids/internal_ids.htm">ID<img style="border: none;margin-left: 5px;" src="../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span>.</p>
        <p>Query processing starts from evaluating leaf nodes of the
query graph and then going on to the top level filtering or joining the
results.</p>
        <p>For a simple query:</p>
        <p><code>query.constrain(Pilot.class);</code>
        </p>
        <p>class index will be used to get ID's of all Pilot objects.</p>
        <p>For a more complex query:</p>
        <p><code>query.constrain(Pilot.class);</code>
        </p>
        <p><code>Constraint constr = query.descend("name").constrain("Michael
Schumacher");</code>
        </p>
        <p><code>query.descend("points").constrain(new Integer(100)).and(constr);</code>
        </p>
        <p>In case there are indexes on "name" and "points" fields, Pilot
candidates will be created from "points" indexes having value of 100 and "name"
indexes with value "Michael Schumacher". With BTree indexes this search will be
really fast. If there is no index all Pilot IDs will be used as candidates.
After the candidates are collected all existing constraints fill be tested
against them to filter out results that do not match the criteria.</p><a name="Inheritance"></a>
        <h2>Inheritance</h2>
        <p>In the case of inherited classes of interfaces:</p>
        <ul class="unIndentedList">
            <li value="1">querying against parent class or interface will
include results for all subclasses/implementations;</li>
            <li value="2">field indexes can be used and should be defined
against the parent class fields</li>
        </ul>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>