<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Implementation Strategies|Enhancement Tools|Complex Example" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Load Time Enhancement	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../../index_CSH.html#implementation_strategies/enhancement_tools/enhancement_for_java/complex_example/load_time_enhancement.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../../implementation_strategies.htm">Implementation Strategies</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../../enhancement_tools.htm">Enhancement Tools</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../complex_example.htm">Complex Example</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Load Time Enhancement</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Load Time Enhancement</h1>
        <p>The following code is used to store and retrieve
MaintenanceQueue objects containing references to Car, Pilot and Id objects:</p>
        <pre class="prettyprint" xml:space="preserve">EnhancerMain.java: main
public static void main(String[] args)  {
    new File(DB4O_FILE_NAME).delete();
    ObjectContainer db = Db4o.openFile(configuration(), DB4O_FILE_NAME);
    MaintenanceQueue&lt;Car&gt; queue = null;
    for(int number = 0; number &lt; DEPTH; number++)  {
      queue = MaintenanceQueue.add(queue, new Car("Car" + number, 
          new Pilot("Pilot #" + number, new Id("110021" + number))));
    }
    db.store(queue);
    db.close();

    db = Db4o.openFile(configuration(), DB4O_FILE_NAME);
    EventRegistry registry = EventRegistryFactory.forObjectContainer(db);
    registry.activated().addListener(new EventListener4()  {
      public void onEvent(Event4 event, EventArgs args)  {
        ObjectEventArgs objArgs = (ObjectEventArgs) args;
        System.out.println("ACTIVATED: " + objArgs.object());
      }
    });
    ((ObjectContainerBase)db).getNativeQueryHandler().addListener(new Db4oQueryExecutionListener()  {
      public void notifyQueryExecuted(NQOptimizationInfo info)  {
        System.out.println(info);
      }
    });
    
    List&lt;MaintenanceQueue&lt;Car&gt;&gt; result = db.query(new Predicate&lt;MaintenanceQueue&lt;Car&gt;&gt;()  {
      @Override
      public boolean match(MaintenanceQueue&lt;Car&gt; queue)  {
        return queue.value().getModel().equals("Car0");
      }
    });
    System.out.println(result.size());
    //for (Iterator&lt;MaintenanceQueue&lt;Car&gt;&gt; i = result.iterator(); i.hasNext();){
      MaintenanceQueue&lt;Car&gt; carQueue = result.queryByExample(0);
      Car car = carQueue.value();
      System.out.println(car);
      
      Pilot pilot = car.getPilot();
      System.out.println(pilot);
      while (carQueue.hasNext()) {
        carQueue = carQueue.next();
        car = carQueue.value();
        System.out.println(car);
        
        pilot = car.getPilot();
        System.out.println(pilot);
      }
    //}
    db.close();
    new File(DB4O_FILE_NAME).delete();
  }</pre>
        <pre class="prettyprint" xml:space="preserve">EnhancerMain.java: configuration
private static Configuration configuration()  {
    Configuration config = Db4o.newConfiguration();
    config.add(new TransparentActivationSupport());
    // NOTE: required for load time instrumentation!
    config.reflectWith(new JdkReflector(EnhancerMain.class.getClassLoader()));
    return config;
  }</pre>
        <p>Please, run this method to see that in <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../../../object_lifecycle/activation/transparent_activation_framework.htm">TA<img style="border: none;margin-left: 5px;" src="../../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> mode all the
objects are fully activated immediately. Also <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../../../Basic_Concepts/native_query_concepts.htm">NQ<img style="border: none;margin-left: 5px;" src="../../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> info reports that the queries
run dynamically optimized.</p>
        <p>In order to use TA advantages (lazy activation), we launch the application through an instrumenting classloader. The following configuration options are available:</p>
        <ul>
            <li value="1">A <i>ClassFilter</i> specifies which classes should be instrumented. In the example, we are using a filter that will only accept classes whose fully qualified name starts with a given prefix. The instrumentation API already comes with a variety of other filter implementations, and it's easy to create custom filters.</li>
            <li value="2">A sequence of <i>ClassEdits</i>. A ClassEdit is a single instrumentation step. In the example, we are applying two steps: First, we preoptimize all <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../../../Basic_Concepts/native_query_concepts.htm">Native Query<img style="border: none;margin-left: 5px;" src="../../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> Predicates, then we instrument for <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../../../object_lifecycle/activation/transparent_activation_framework.htm">Transparent Activation<img style="border: none;margin-left: 5px;" src="../../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span>. Note that the order of steps is significant: Switching the order would leave the generated NQ optimization code unaware of TA. The db4otools package provides a convenience launcher with a hardwired sequence for combined NQ/TA instrumentation.</li>
            <li value="3">The <i>classpath</i> for the instrumented classes, represented by a sequence of URLs. This must contain all classes "reachable" from the classes to be instrumented - the easiest way probably is to provide the full application class path here. The classes to be instrumented need not be listed here, they are implicitly added to this classpath, anyway.  </li>
        </ul>
        <pre class="prettyprint" xml:space="preserve">EnhancerStarter.java: main
public static void main(String[] args) throws Exception  {
    ClassFilter filter = new ByNameClassFilter("enhancement.", true);
    BloatClassEdit[] edits =  { new TranslateNQToSODAEdit() , new InjectTransparentActivationEdit(filter) };
    URL[] urls =  { new File("/work/workspaces/db4o/tatest/bin").toURI().toURL() };
    Db4oInstrumentationLauncher.launch(edits, urls, EnhancerMain.class.getName(), new String[] {});
  }</pre>
        <p>Try this code now - if everything is correct you will see
that the objects are getting activated as they are requested. NQ info also
should say that the queries are preoptimized.</p>
        <p>Note that for load time instrumentation to work, the application code has to make sure db4o operates on the appropriate classloader for the persistent model classes. </p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="enhancementexamplejava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>