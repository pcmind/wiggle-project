<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Implementation Strategies|Callbacks|Commit-Time Callbacks" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Committed Event Example	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#implementation_strategies/callbacks/commit-time_callbacks/committed_event_example.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../implementation_strategies.htm">Implementation Strategies</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../callbacks.htm">Callbacks</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../commit-time_callbacks.htm">Commit-Time Callbacks</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Committed Event Example</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Committed Event Example</h1>
        <p>Committed callbacks can be used in various scenarios:</p>
        <ul>
            <li value="1">backup on commit;</li>
            <li value="2">database replication on commit;</li>
            <li value="3">client database synchronization.</li>
        </ul>
        <p>In our example we will create an
implementation for the last case. </p>
        <p>When several clients are working
on the same objects it is very possible that the data will be outdated on some
of the clients. Before the commit-callbacks feature was introduced the solution
was to call <code>refresh</code> regularly to get object updates from the
server. With the commit-callback this process can be easily automated:</p>
        <ul>
            <li value="1">objects are modified when the commit is done;</li>
            <li value="2">the successful commit triggers committed event on the clients;</li>
            <li value="3">committed event handler updates modified objects on the
clients.</li>
        </ul>
        <p>Let's open 2 clients, which will work with <a href="car.htm">Car</a> objects,
and register committed event listeners for them.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">PushedUpdatesExample.java: openClient
private ObjectContainer openClient()  {
    try  {
      ObjectContainer client = Db4oClientServer.openClient(
          Db4oClientServer.newClientConfiguration(), "localhost",
          PORT, USER, PASSWORD);
      EventListener4 committedEventListener = createCommittedEventListener();
      EventRegistry eventRegistry = EventRegistryFactory
          .forObjectContainer(client);
      eventRegistry.committed().addListener(committedEventListener);
      // save the client-listener pair in a map, so that we can
      // remove the listener later
      clientListeners.put(client, committedEventListener);
      return client;
    } catch (Exception ex)  {
      ex.printStackTrace();
    }
    return null;
  }</pre>
            <pre class="prettyprint" xml:space="preserve">PushedUpdatesExample.java: createCommittedEventListener
private EventListener4 createCommittedEventListener()  {
    return new EventListener4()  {
      public void onEvent(Event4 e, EventArgs args)  {
        CommitEventArgs cArgs = (CommitEventArgs) args;
        <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../../Basic_Concepts/transaction.htm">Transaction<img style="border: none;margin-left: 5px;" src="../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> trans = (Transaction)cArgs.transaction(); 
        // get all the updated objects
        ObjectInfoCollection updated = cArgs.updated();
        Iterator4 infos = updated.iterator();
        while (infos.moveNext())  {
          ObjectInfo info = (ObjectInfo) infos.current();
          Object obj = info.getObject();
          // refresh object on the client
          trans.objectContainer().ext().refresh(obj, 2);
        }
      }
    };
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />Run the following method to see how the 2 clients work
concurrently on the same object:

<p MadCap:conditions="Primary.Java,Primary.All languages"><pre class="prettyprint" xml:space="preserve">PushedUpdatesExample.java: run
public void run() throws IOException, DatabaseFileLockedException  {
    new File(DB4O_FILE_NAME).delete();
    ObjectServer server = 
Db4oClientServer.openServer(Db4oClientServer
        .newServerConfiguration(), DB4O_FILE_NAME, PORT);
    try  {
      server.grantAccess(USER, PASSWORD);

      ObjectContainer client1 = openClient();
      ObjectContainer client2 = openClient();

      if (client1 != null &amp;&amp; client2 != null)  {
        try  {
          // wait for the operations to finish
          waitForCompletion();

          // save pilot with client1
          Car client1Car = new Car("Ferrari", 2006, new Pilot(
              "Schumacher"));
          client1.store(client1Car);
          client1.commit();

          waitForCompletion();

          // retrieve the same pilot with client2
          Car client2Car = (Car) client2.query(Car.class).next();
          System.out.println(client2Car);

          // modify the pilot with client1
          client1Car.setModel(2007);
          client1Car.setPilot(new Pilot("Hakkinnen"));
          client1.store(client1Car);
          client1.commit();

          waitForCompletion();

          // client2Car has been automatically updated in
          // the committed event handler because of the
          // modification and the commit by client1
          System.out.println(client2Car);

          waitForCompletion();
        } catch (Exception ex)  {
          ex.printStackTrace();
        } finally  {
          closeClient(client1);
          closeClient(client2);
        }
      }
    } catch (Exception ex)  {
      ex.printStackTrace();
    } finally  {
      server.close();
    }
  }</pre></p><p MadCap:conditions="Global.Primary:java" /><p MadCap:conditions="Global.Primary:cs" /><p MadCap:conditions="Global.Primary:vb" /><p>You should see that client2 picked up the changes committed
from the client1 automatically due to the committed event handler.</p><p>Working with the committed event you should remember that
the listener is called in a separate thread, which needs to be synchronized
with the main application thread. This functionality is not implemented in the presented example, instead a simple thread Sleep(1000) method is used (WaitForCompletion method), which is not reliable at all. For a reliable execution use events and notifications from the committed callbacks. </p><p>It is a good practice to remove the committed event handlers
from the registry before shutting down the clients:</p><p MadCap:conditions="Primary.Java,Primary.All languages"><pre class="prettyprint" xml:space="preserve">PushedUpdatesExample.java: closeClient
private void closeClient(ObjectContainer client)  {
    // remove listeners before shutting down
    if (clientListeners.queryByExample(client) != null)  {
      EventRegistry eventRegistry = EventRegistryFactory
          .forObjectContainer(client);
      eventRegistry.committed().removeListener(
          clientListeners.queryByExample(client));
      clientListeners.remove(client);
    }
    client.close();
  }</pre></p><p MadCap:conditions="Global.Primary:java" /><p MadCap:conditions="Global.Primary:cs" /><p MadCap:conditions="Global.Primary:vb" /><p>The example presented above works very well for remote client-server mode when object identity recognition between clients and the server is managed by internal core logic. However, if you will try the same in embedded client-server you will find out that the committed event handler is actually useless. Why is it so? In embedded mode clients and server objects are kept in the same operating memory, but each client and the server own their own fragment of it where the objects are instantiated. This means that the same object (Car in our example) will be instantiated twice: for client1 and for client2. In order to recognize those instances as the same database object, we will need to add id comparison to the event handler:</p><p MadCap:conditions="Primary.Java,Primary.All languages"><pre class="prettyprint" xml:space="preserve">PushedUpdatesExample.java: createCommittedEventListenerForEmbedded
private EventListener4 createCommittedEventListenerForEmbedded(
      final ObjectContainer objectContainer)  {
    return new EventListener4()  {
      public void onEvent(Event4 e, EventArgs args)  {
        Transaction trans = 
((InternalObjectContainer)objectContainer).transaction();

        // get all the updated objects
        ObjectInfoCollection updated = ((CommitEventArgs) args)
            .updated();
        Iterator4 infos = updated.iterator();
        while (infos.moveNext())  {
          ObjectInfo info = (ObjectInfo) infos.current();
          // Obtain object reference in local cache by object id
             Object obj = trans.objectForIdFromCache((int)info.getInternalID());

          if (obj != null)  {
            // refresh object on the client
            objectContainer.ext().refresh(obj, 2);
          }
        }
      }
    };
  }</pre></p><p MadCap:conditions="Global.Primary:java" /><p MadCap:conditions="Global.Primary:cs" /><p MadCap:conditions="Global.Primary:vb" /><p>The logic above will link the changed objects from one client to the objects in memory of another client and will update them if necessary. </p><p MadCap:conditions="Primary.Online">Download example code:</p><p MadCap:conditions="Primary.Online"><MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="commitcallbacksjava.zip">Java </a></MadCap:conditionalText></p><script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js"></script></body>
</html>