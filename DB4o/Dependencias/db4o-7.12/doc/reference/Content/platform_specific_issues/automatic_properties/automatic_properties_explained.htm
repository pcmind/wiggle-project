<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Automatic Properties Explained	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#platform_specific_issues/automatic_properties/automatic_properties_explained.htm" style="">Open topic with navigation</a>
        </p>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Automatic Properties Explained</h1>
        <p>What
happens with automatic fields under the hood? Well, if we look into the
bytecode produced, we will see that the default private fields are actually
inserted by the compiler and used to keep the properties data.  In .NET 3.5 Microsoft version of the compiler
this automatic fields usually get a name like: &lt;Name&gt;k__BackingField,
where "Name" is the name of the property.</p>
        <p>Keeping this information in mind we can still produce a
valid SODA query and even add indexes:</p>
        <pre class="prettyprint" xml:space="preserve">PropertiesExample.cs: TestSODA
private static void TestSODA()
         {
            IConfiguration configuration = Db4oFactory.NewConfiguration();
            configuration.ObjectClass(typeof(Car)).ObjectField("Pilot").Indexed(true);
            configuration.ObjectClass(typeof(Pilot)).ObjectField("Points").Indexed(true);
            configuration.Diagnostic().AddListener(new DiagnosticToConsole());
            IObjectContainer db = Db4oFactory.OpenFile(configuration, Db4oFileName);
            try
              {
                IQuery query = db.Query();
                query.Constrain(typeof(Car));
                query.Descend("Pilot").Descend("Points").Constrain("99");

                IObjectSet  result = query.Execute();
                Console.WriteLine("Test SODA");
                ListResult(result);
            }
            finally
             {
                db.Close();
            }
        }</pre>You can run
this code and check that it works correctly. However, it is not recommended to
stick to this hack, as the compiler generated field names are not guaranteed to
keep the name as produced in this example. Please, treat this example as an
illustration only.


  
     


        <p MadCap:conditions="Primary.Online">Download example code:</p><script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js"></script></body>
</html>