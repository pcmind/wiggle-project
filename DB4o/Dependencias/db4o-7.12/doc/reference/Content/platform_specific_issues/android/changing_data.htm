<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Platform Specific Issues|Android" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Changing Data	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#platform_specific_issues/android/changing_data.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../platform_specific_issues.htm">Platform Specific Issues</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../android.htm">Android</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Changing Data</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Changing Data</h1>
        <p>For this test we will select and update a car with a new
pilot, where existing pilot has 15 points:</p>
        <p>SQLite:</p>
        <pre class="prettyprint" xml:space="preserve">SqlExample.java: updateCar
public static void updateCar() {
        SQLiteDatabase db = database();
        if (db != null) {
          long startTime = System.currentTimeMillis();
          // insert a new pilot
          ContentValues updateValues = new ContentValues();
          
        updateValues.put("id", 101);
        updateValues.put("name", "Tester1");
          updateValues.put("points", 25);
          db.insert(DB_TABLE_PILOT, null, updateValues);
          
          updateValues = new ContentValues();
          
          // update pilot in the car
          updateValues.put("pilot", 101);
          int count = db.update(DB_TABLE_CAR, updateValues, 
"pilot in (select id from pilot where points = 15)", null);
          if (count == 0) {
            logToConsole(0, "Car not found, refill the database to continue.", false);
          } else  {  
            logToConsole(startTime, "Updated selected object: ", false);
          }
        }
    }</pre>
        <p>db4o:</p>
        <p>(Select Car using <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../Basic_Concepts/native_query_concepts.htm">Native Query<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span>)</p>
        <pre class="prettyprint" xml:space="preserve">Db4oExample.java: updateCar
public static void updateCar() {
        ObjectContainer container=database();
        if (container != null) {
          try  {
            long startTime = System.currentTimeMillis();
            ObjectSet result = container.query(new Predicate() {
              public boolean match(Object object) {
                if (object instanceof Car) {
                  return ((Car)object).getPilot().getPoints() == 15;
                }
                return false;
              }
            });
            Car car = (Car)result.next();
            car.setPilot(new Pilot("Tester1", 25));
            container.store(car);
            logToConsole(startTime, "Updated selected object: ", false);
      } catch (Exception e) {
        logToConsole(0, "Car not found, refill the database to continue.", false);
      }
        }
    }</pre>
        <p> In this example db4o and SQLite actually behave quite differently. For SQLite in order to update a pilot in an existing car in the database the following actions are needed:</p>
        <ol>
            <li value="1">A new pilot should be created and saved to the database.</li>
            <li value="2">New pilot's primary key (101) should be retrieved (not shown in this example, but is necessary for a real database application).</li>
            <li value="3">An update statement should be issued to replace pilot field in the car table.</li>
        </ol>
        <p>For db4o database the sequence will be the following:</p>
        <ol>
            <li value="1">Retrieve the car from the database</li>
            <li value="2">Update the car with a new pilot object</li>
        </ol>
        <p>As you can see the only benefit of SQLite API is that the car can be selected and updated in one statement. But in the same time there are serious disadvantages:</p>
        <ul>
            <li value="1">A new pilot record should be created absolutely separately (in a real database will also include ORM)</li>
            <li value="2">The pilot's <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../implementation_strategies/ids_and_uuids/internal_ids.htm">ID<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> needs to be retrieved separately (we must  sure that it is a correct id)  </li>
        </ul>In db4o we avoid these disadvantages as creating new pilot and updating the car value are actually combined in one atomic operation.  
     



        <p MadCap:conditions="Primary.Online">Download example code:</p><p MadCap:conditions="Primary.Online"><MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="dbcomparerefjava.zip">Java </a></MadCap:conditionalText></p><script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js"></script></body>
</html>