<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Platform Specific Issues" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Servlets	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../Resources/Code/prettify.js">
        </script>
        <script src="../Resources/Code/lang-vb.js">
        </script>
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../index_CSH.html#platform_specific_issues/servlets.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../platform_specific_issues.htm">Platform Specific Issues</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Servlets</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Servlets</h1>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <p>Running db4o as the persistence layer of a Java web application is easy. There is no installation procedure - db4o is just another library in your application. There are only two issues that make web applications distinct from standalone programs from a db4o point of view. One is the more complex classloader environment - db4o needs to know itself (of course) and the classes to be persisted. Please refer to the <a href="classloader_issues.htm">classloader</a> chapter for more information.</p>
            <p>The other issue is configuring, starting and shutting down the db4o server correctly. This can be done at the servlet API layer or within the web application framework you are using.</p>
            <p>On the servlet API layer, you could bind db4o server handling to the servlet context via an appropriate listener. A very basic sketch might look like this:</p>
            <pre class="prettyprint" xml:space="preserve">Db4oServletContextListener.java
/**//* Copyright (C) 2004 - 2006 Versant Inc. http://www.db4o.com */

package com.db4odoc.servlets;

import com.db4o.Db4o;
import com.db4o.ObjectServer;
import javax.servlet.*;

public class Db4oServletContextListener implements ServletContextListener  {
  public static final String KEY_DB4O_FILE_NAME = "db4oFileName";

  public static final String KEY_DB4O_SERVER = "db4oServer";

  private ObjectServer server = null;

  public void contextInitialized(ServletContextEvent event)  {
    close();
    ServletContext context = event.getServletContext();
    String filePath = context.getRealPath("WEB-INF/db/"
        + context.getInitParameter(KEY_DB4O_FILE_NAME));
    server = Db4o.openServer(filePath, 0);
    context.setAttribute(KEY_DB4O_SERVER, server);
    context.log("db4o startup on " + filePath);
  }

  public void contextDestroyed(ServletContextEvent event)  {
    ServletContext context = event.getServletContext();
    context.removeAttribute(KEY_DB4O_SERVER);
    close();
    context.log("db4o shutdown");
  }

  private void close()  {
    if (server != null)  {
      server.close();
    }
    server = null;
  }
}</pre>
            <p>This listener just has to be registered in the web.xml.</p>
            <pre class="prettyprint" xml:space="preserve">web.xml
&lt;context-param&gt;
  &lt;param-name&gt;db4oFileName&lt;/param-name&gt;
  &lt;param-value&gt;db4oweb.yap&lt;/param-value&gt;
&lt;/context-param&gt;
&lt;listener&gt;
  &lt;listener-class&gt;
    com.db4odoc.servlets.Db4oServletContextListener
  &lt;/listener-class&gt;
&lt;/listener&gt;</pre>
            <p>Now db4o should be available to your application classes.</p>
            <p><code>ObjectServer server=(ObjectServer)context.getAttribute("db4oServer")</code>
            </p>
            <p>A more complex and 'old school' example without using context listeners comes with the samples section of the db4o3 distribution that's still available from our web site.</p>
            <p>However, We strongly suggest that you use the features provided by your framework and that you consider not exposing db4o directly to your application logic. (There is nothing db4o-specific about these recommendentations, we would vote for this in the presence of any persistence layer.)</p>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="servletsjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>