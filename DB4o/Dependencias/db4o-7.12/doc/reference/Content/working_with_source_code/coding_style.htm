<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Working With Source Code" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Coding Style	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js">
        </script>
        <script src="../Resources/Code/prettify.js">
        </script>
        <script src="../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../index_CSH.html#working_with_source_code/coding_style.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../working_with_source_code.htm">Working With Source Code</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Coding Style</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Coding Style</h1>Coding conventions proved to be very important for producing maintainable and reliable code. In db4o production cycle, coding conventions have a special value, as the code ownership is spread over all the members of the team and any developer is able to work with any piece of code. 
<p>In general, we follow <A href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.htm">Code Conventions for the Java Programming Language</A>, however there are some specifics, which can be useful to know for db4o users and core contributors.</p><p>This document is supposed to emphasize some of the java coding style recommendations used by db4o and explain db4o specific coding style requirements.</p><a name="File Header"></a><H2>File Header</H2><p>All code files must have copyright.The normal db4o copyright notice should be created as the standard template in your Eclipse workspace for db4o development.  Window + Preferences + Java + Code Style + Code Templates + Code + New Java Files /* Copyright (C) 2004 - 2009 Versant Inc. http://www.db4o.com */ ${package_declaration} ${typecomment} ${type_declaration}</p><a name="Naming Conventions"></a><H2>Naming Conventions</H2><a name="General Naming"></a><H3>General Naming</H3><p>All names should be written in English. </p><p>English is the preferred language for international development.</p><a name="Package naming"></a><H3>Package naming</H3><p>Package names should be in all lower case. </p><p><code>com.db4o.reflection</code></p><a name="Class Naming"></a><H3>Class Naming</H3><p>Class names should be nouns and written in mixed case starting with upper case. </p><p><code>ObjectContainer, Configuration</code></p><a name="Methods Naming"></a><H3>Methods Naming</H3><p>Method names must be verbs and written in mixed case starting with lower case. </p><p><code>isReadOnly(), rename()</code></p><a name="Abbreviations and Acronyms"></a><H3>Abbreviations and Acronyms</H3><p>Abbreviations and acronyms should not be uppercase when used as name. </p><p><code>IoAdapter(); // NOT: IOAdapter</code></p><p>Using all uppercase for the base name will give conflicts with the naming conventions given above and will reduce the readability.</p><a name="Type Naming"></a><H3>Type Naming</H3><p>Type names must be nouns and written in mixed case starting with upper case. </p><p><code>Db4oList, TransientClass</code></p><a name="Variable Naming"></a><H3>Variable Naming</H3><p>Variable names must be in mixed case starting with lower case. Variables should have full sensible name, reflecting their purpose.</p><p><code>listener, objectContainer</code></p><UL><LI value="1">Private Variables</LI><p>Private class variables should have underscore prefix. </p><p><code>public abstract class IoAdapter {</code></p><p><code>  private int _blockSize;</code></p><p><code>.....</code></p><p><code>}</code></p><p>Underscore prefix will help a programmer to distinguish private class variables from local scratch variables.</p></UL><UL><LI value="1">Scratch Variables</LI><p>Scratch variables used for iterations or indices should be kept short. Common practice is to use i, j, k, m, n for numbers and c, d for characters. </p></UL><a name="Constants"></a><H3>Constants</H3><p>Constants names (final variables) must be all uppercase using underscore to separate words. </p><p><code>ACTIVATION_DEPTH, READ_ONLY</code></p><p>It is a good practice to add methods to retrieve constant values for user interface:</p><p><code>boolean isReadOnly() {</code></p><p><code>  return _config.getAsBoolean(READ_ONLY);</code></p><p><code>}</code></p><a name="Getters/Setters"></a><H3>Getters/Setters </H3><p>Normally we do not use <I>get/set</I><a name="kanchor198"></a> prefix for methods accessing attributes directly, unless such usage adds  valuable information: </p><p><code>public void setStateDirty() {}</code></p><p>In other cases feel free to access attributes by names:</p><p><code>clientServer(), configuration()</code></p><a name="Boolean Methods And Variables"></a><H3>Boolean Methods And Variables</H3><p><I>is(can, has, should)</I> prefix should be used for boolean variables and methods. </p><p><code>isDirty(), canHold(reflectClass)</code></p><p>Using the <I>is(can, has, should)</I> prevents choosing bad names like <I>status</I> or <I>flag</I>. <I>isStatus</I> or <I>isFlag</I> simply doesn't fit, and the programmer is forced to choose more meaningful names. </p><p>Setter methods for boolean variables must have <I>set</I> prefix as in: </p><p><code>public void setStateDirty() {}</code></p><a name="Initialize"></a><H3>Initialize</H3><p>The term <I>initialize</I> can be used where an object or a concept is established. <code>classIndex.initialize(_targetDb);</code></p><p>Abbreviations like <I>init</I> must be avoided.</p><a name="Complementary Names"></a><H3>Complementary Names</H3><p>Complementary names must be used for complementary entities:</p><p>get/set, add/remove, create/destroy, start/stop, insert/delete, increment/decrement, old/new, begin/end, first/last, up/down, min/max, next/previous, old/new, open/close, show/hide, suspend/resume, etc. For example:</p><p><code>startServer();</code></p><p><code>stopServer();</code></p><p>This convention helps to distinguish the borders of a logical operation and to recognize opposite action methods.</p><a name="Abbreviations"></a><H3>Abbreviations </H3><p>Abbreviations in names should be avoided.</p><p><code>copyIdentity (); // NOT: cpIdentity, NOT:copyId</code></p><p>However some well established and commonly used acronyms or abbreviations must be preferred to full names:</p><p><code>html // NOT: HypertextMarkupLanguage</code><code>cpu // NOT: CentralProcessingUnit </code></p><a name="Named Constants"></a><H3>Named Constants</H3><p>Named constants should be used instead of:</p><ul><li value="1"> magic numbers:<br /><code>            if (blockSize &gt; MAX_BLOCK_SIZE) // NOT: blockSize &gt; 256</code></li><li value="2">fixed phrases:<br /><code>            if (fieldname == CREATIONTIME_FIELD) // NOT if (fieldname == "i_uuid")</code></li></ul><p>This convention gives a programmer an idea about the meaning of the constant value. At the same time, it makes it easier to change the constant value: the change must be made only in one place.  </p><a name="Code Organization"></a><H2>Code Organization</H2><a name="Package Structure"></a><H3>Package Structure</H3><p>Internal class implementations should be placed in com.db4o.internal package. This helps to keep the top-level API smaller and more understandable. </p><p><code>com.db4o.query.Evaluation</code></p><p>has implementation in </p><p><code>com.db4o.internal.query.PredicateEvaluation</code></p><a name="Classes and Interfaces"></a><H3>Classes and Interfaces</H3><p>Class and Interface declarations should be organized in the following manner: </p><OL><LI value="1">Class/Interface documentation. </LI><LI value="2"><code>class</code> or <code>interface</code> statement. </LI><LI value="3">Class (<code>static</code>) variables in the order <code>public</code>, <code>protected</code>,  <code>package</code>(no access modifier), <code>private</code>.</LI><LI value="4">Instance variables in the order  <code>public</code>, <code>protected</code>,  <code>package</code>(no access modifier), <code>private</code>.</LI><LI value="5">Constructors. </LI><LI value="6">Methods. </LI></OL><a name="Methods"></a><H3>Methods </H3><p>Group class methods by functionality rather than by scope or accessibility. For example, a private class method can be in between two public instance methods. The goal is to make reading and understanding of the code easier.</p><a name="Wait &amp; Notify"></a><H3>Wait &amp; Notify </H3><p><a name="kanchor199"></a>Use Lock4#snooze(), #awake() instead of Object#wait directly for <span class="MCTextPopup"><a href="javascript:void(0);" class="MCTextPopupSpot" onclick="FMCTextPopup( event, this ); return false;">CF<img style="border: none;margin-left: 5px;" src="../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/ExpandingOpen.gif' ); }" /></a><span class="MCTextPopupBody" style="display: none; ">.NET Compact Framework</span></span> reason.</p><p></p><a name="Blank Lines"></a><H3>Blank Lines</H3><p>Use blank lines to separate methods, class variable declarations of different scope, and logical units within a block of code. Consider extracting logical blocks of code into separate methods</p><a name="Import Declarations"></a><H3>Import Declarations</H3><p>Import declarations should only include package name:. </p><p><code>import java.util.*; <I>// NOT: import java.util.List;</I></code></p><p>Modern IDEs, such as <A href="http://www.eclipse.org/">Eclipse</A>, provide an automated way to create correct import statements (see "Source/Organize Imports" command in Eclipse).</p><a name="Initialization"></a><H3>Initialization</H3><p>Local variables should appear at the beginning of a code block. (A block is any code surrounded by curly braces "{" and "}".) Try to initialize the variable immediately to prevent using uninitialized values. </p><p>The exception to the rule is indexes of <code><code>for</code></code> loops, which in Java can be declared in the <code><code>for</code></code> statement: </p><p><code>for (int i = 0; i &lt; maxLoops; i++) { ... }</code></p><p>Avoid local declarations that hide declarations at higher levels. For example, do not declare the same variable name in an inner block: </p><p><code>int count; </code></p><p><code>... </code></p><p><code>myMethod() {</code></p><p><code>    if (condition) {</code></p><p><code>        int count = 0;     // AVOID! </code></p><p><code>        ... </code></p><p><code>    }</code></p><p><code>    ... </code></p><p><code>} </code></p><a name="Exception Handling"></a><H2>Exception Handling</H2><p>Never use exception#printStackTrace() in db4o productive code.</p><p>There are three possible choices that can be used:</p><UL><LI value="1">throw (the base type is Db4oException) </LI><LI value="2">swallow silently</LI><LI value="3">swallow with a com.db4o.diagnostic message to the user</LI></UL><a name="Comments"></a><H2>Comments</H2><p>Supply your code with javadoc comments. All public classes and public and protected functions within public classes should be documented. This makes it easy to keep up-to-date online code documentation. If a class or a method is not part of public API use <code>@exlude</code> tag. For further details, see "<A href="http://java.sun.com/javadoc/writingdoccomments">How to Write Doc Comments for Javadoc</A>"</p><p>All comments should be written in English. In an international environment, English is the preferred language.</p><p>Avoid using comments to explain tricky code, rather rewrite it to make it self-explanatory. </p><p>For more information see: <A href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.htm">Code Conventions for the Java Programming Language</A>. </p><p>This document was compiled based on db4o team coding practices and the following documents:</p><p><A href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.htm">http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.htm</A></p><p><A href="http://geosoft.no/development/javastyle.htm">http://geosoft.no/development/javastyle.htm</A></p><p><A href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.htm">http://java.sun.com/j2se/javadoc/writingdoccomments/index.htm</A></p><script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js"></script></body>
</html>