<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Client-Server|Concurrency Control" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Optimistic Locking	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#client-server/concurrency_control/optimistic_locking.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../client-server.htm">Client-Server</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../concurrency_control.htm">Concurrency Control</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Optimistic Locking</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Optimistic Locking</h1>
        <p>In optimistic locking system no locks are used to prevent
collision: any user can read an object into the memory and work on it at any
time. However, before the client can save its modifications back to the database,
a check should take place verifying that the item did not change since the time
of initial read (no collision occurred). If a collision is detected it should
be resolved according to your application logic. Typical solutions are:</p>
        <ul>
            <li value="1">Rollback
</li>
            <li value="2">Display the
problem and let the user decide  </li>
            <li value="3">Merge the
changes </li>
            <li value="4">Log the
problem so someone can decide later </li>
            <li value="5">Ignore the
collision and overwrite</li>
        </ul>
        <p>Let's look at an example realization.</p>
        <p>We will use a db4o database containing
objects of Pilot class and a separate thread to create a client connection to
the database, retrieve and modify objects.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">OptimisticThread.java: run
public void run()  {
      try  {
        List&lt;Pilot&gt; result = _container.query(Pilot.class);
        for (Pilot pilot: result) {
          /**//* We will need to set a lock to make sure that the 
           * object version corresponds to the object retrieved.
           * (Prevent other client committing changes
           * at the time between object retrieval and version
           * retrieval )
           */
          if (!_container.ext().setSemaphore("LOCK_"+
_container.ext().getID(pilot), 3000)) {
                System.out.println("Error. The object is locked");
                continue;
              }
          long objVersion = _container.ext().getObjectInfo(pilot).getVersion();
          _container.ext().refresh(pilot, Integer.MAX_VALUE);
          _container.ext().releaseSemaphore("LOCK_"
+_container.ext().getID(pilot));
          
          /**//* save object version into _idVersions collection
           * This will be needed to make sure that the version
           * originally retrieved is the same in the database 
           * at the time of modification
           */
          long id = _container.ext().getID(pilot);
          _idVersions.put(id, objVersion);
          
              System.out.println(getName() + "Updating pilot: " 
+ pilot+ " version: "+objVersion);
              pilot.addPoints(1);
              _updateSuccess = false;
              randomWait();
              if (!_container.ext().setSemaphore("LOCK_"+
_container.ext().getID(pilot), 3000)) {
                System.out.println("Error. The object is locked");
                continue;
              }
              _container.store(pilot);
              /**//* The changes should be committed to be 
               * visible to the other clients
               */
              _container.commit();
              _container.ext().releaseSemaphore("LOCK_"+
_container.ext().getID(pilot));
              if (_updateSuccess) {
                System.out.println(getName() + "Updated pilot: " + pilot);
              }
              System.out.println();
              /**//* The object version is not valid after commit
               * - should be removed
               */
              _idVersions.remove(id);
        }
          
      } finally  {
        _container.close();
      }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>A semaphore is used for locking the object
before saving and the lock is released after commit when the changes become
visible to the other clients. The semaphore is assigned a name based on object
<span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../implementation_strategies/ids_and_uuids/internal_ids.htm">ID<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> to make sure that only the modified object will be locked and the other
clients can work with the other objects of the same class simultaneously.</p>
        <p>Locking the object for the update only
ensures that no changes will be made to the object from the other clients
during update. However the object might be already changed since the time when
the current thread retrieved it. In order to check this we will need to
implement an event handler for the updating event:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">OptimisticThread.java: registerCallbacks
public  void registerCallbacks() {
      EventRegistry registry =  EventRegistryFactory.
forObjectContainer(_container);
      // register an event handler to check collisions on update
      registry.updating().addListener(new EventListener4()  {
        public void onEvent(Event4 e, EventArgs args)  {
          CancellableObjectEventArgs queryArgs = ((CancellableObjectEventArgs) args);
          Object obj = queryArgs.object();
          // retrieve the object version from the database
          long currentVersion = _container.ext().getObjectInfo(obj).getVersion();
          long id = _container.ext().getID(obj);
          // get the version saved at the object retrieval
          long initialVersion = _idVersions.queryByExample(id); 
          if (initialVersion != currentVersion) {
            System.out.println(getName() +"Collision: ");
            System.out.println(getName() +"Stored object: version: "
+ currentVersion);
            System.out.println(getName() +"New object: " + obj+ 
" version: "+ initialVersion);
            queryArgs.cancel();
          } else  {
            _updateSuccess = true;
          }
        }
      });
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>In the above case the changes are discarded
and a message is sent to the user if the object is already modified from
another thread. You can replace it with your own strategy of collision
handling.</p>
        <p>Note: the supplied example has random delays
to make the collision happen. You can experiment with the delay values to see
different behavior.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">OptimisticThread.java: randomWait
private void randomWait()  {
        try  {
            Thread.sleep((long)(5000*Math.random()));
        } catch(InterruptedException e)  {
            System.out.println("Interrupted!");
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>
        </p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="concurrency_controlconcurrencyjava.zip">Java</a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>