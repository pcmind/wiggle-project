<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Client-Server" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Embedded	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../Resources/Code/prettify.js">
        </script>
        <script src="../Resources/Code/lang-vb.js">
        </script>
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../index_CSH.html#client-server/embedded.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../client-server.htm">Client-Server</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Embedded</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor157"></a><a name="kanchor158"></a>Embedded</h1>
        <p>From the API side, there's no real difference between transactions executing concurrently within the same VM and transactions executed against a remote server. To use concurrent transactions within a single VM, we just open a db4o server on our database file, directing it to run on port 0, thereby declaring that no networking will take place.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">ClientServerExample.java: accessLocalServer
private static void accessLocalServer()  {
    ObjectServer server = Db4oClientServer.openServer(Db4oClientServer
        .newServerConfiguration(), DB4O_FILE_NAME, 0);
    try  {
      ObjectContainer client = server.openClient();
      // Do something with this client, or open more clients
      client.close();
    } finally  {
      server.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>Again, we will delegate opening and closing the server to our environment to focus on client interactions.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">ClientServerExample.java: queryLocalServer
private static void queryLocalServer(ObjectServer server)  {
    ObjectContainer client = server.openClient();
    listResult(client.queryByExample(new Car(null)));
    client.close();
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>The transaction level in db4o is <i>read committed</i>. However, each client container maintains its own weak reference cache of already known objects. To make all changes committed by other clients immediately, we have to explicitly refresh known objects from the server. We will delegate this task to a specialized version of our listResult() method.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">ClientServerExample.java: listRefreshedResult
private static&lt;T&gt; void listRefreshedResult(ObjectContainer container,
      List&lt;T&gt; result, int depth)  {
    System.out.println(result.size());
    for (T t : result)  {
      container.ext().refresh(t, depth);
      System.out.println(t);
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">ClientServerExample.java: demonstrateLocalReadCommitted
private static void demonstrateLocalReadCommitted(ObjectServer server)  {
    ObjectContainer client1 = server.openClient();
    ObjectContainer client2 = server.openClient();
    Pilot pilot = new Pilot("David Coulthard", 98);
    List&lt;Car&gt; result = client1.queryByExample(new Car("BMW"));
    Car car = result.queryByExample(0);
    car.setPilot(pilot);
    client1.store(car);
    listResult(client1.queryByExample(new Car(null)));
    listResult(client2.queryByExample(new Car(null)));
    client1.commit();
    listResult(client1.queryByExample(Car.class));
    listRefreshedResult(client2, client2.queryByExample(Car.class), 2);
    client1.close();
    client2.close();
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>Simple rollbacks just work as you might expect now.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">ClientServerExample.java: demonstrateLocalRollback
private static void demonstrateLocalRollback(ObjectServer server)  {
    ObjectContainer client1 = server.openClient();
    ObjectContainer client2 = server.openClient();
    List&lt;Car&gt; result = client1.queryByExample(new Car("BMW"));
    Car car = result.queryByExample(0);
    car.setPilot(new Pilot("Someone else", 0));
    client1.store(car);
    listResult(client1.queryByExample(new Car(null)));
    listResult(client2.queryByExample(new Car(null)));
    client1.rollback();
    client1.ext().refresh(car, 2);
    listResult(client1.queryByExample(new Car(null)));
    listResult(client2.queryByExample(new Car(null)));
    client1.close();
    client2.close();
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="clientserverjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>