<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Client-Server|Networked" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Simple db4o Server	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#client-server/networked/simple_db4o_server.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../client-server.htm">Client-Server</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../networked.htm">Networked</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Simple db4o Server</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Simple db4o Server</h1>
        <P>Let's implement a simple standalone db4o server with a special client that can tell the server to shut itself down gracefully on demand.</P>
        <P>First, both the client and the server need some shared configuration information. We will provide this using an interface:</P>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <P>
                <pre class="prettyprint" xml:space="preserve">ServerSetup.java: 
			
/* Copyright (C) 2007 Versant Inc. http://www.db4o.com */
package com.db4odoc.clientserver;

	/**
	* EmbeddedConfiguration used for {@link StartServer} and {@link StopServer}.
	*/
	public interface ServerSetup {
  
		/**
		* the host to be used.
		* If you want to run the client server examples on two computers,
		* enter the computer name of the one that you want to use as server. 
		*/
		public String   HOST = "localhost";  
   		/**
		* the database file to be used by the server.
		*/
		public String   FILE = "reference.db4o";
  
		/**
		* the port to be used by the server.
		*/
		public int    PORT = 0xdb40;
  
		/**
		* the user name for access control.
		*/
		public String   USER = "db4o";
  
		/**
		* the pasword for access control.
		*/
		public String   PASS = "db4o";
	}
</pre>
            </P>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <P>Now we'll create the server:</P>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">StartServer.java
/**//* Copyright (C) 2007 Versant Inc. http://www.db4o.com */
package com.db4odoc.clientserver;

import com.db4o.ObjectContainer;
import com.db4o.ObjectServer;
import com.db4o.cs.Db4oClientServer;
import com.db4o.cs.config.ServerConfiguration;
import com.db4o.messaging.MessageContext;
import com.db4o.messaging.MessageRecipient;

/** *//**
 * starts a db4o server with the settings from {@link ServerSetup}. &lt;br&gt;
 * &lt;br&gt;
 * This is a typical setup for a long running server. &lt;br&gt;
 * &lt;br&gt;
 * The Server may be stopped from a remote location by running StopServer. The
 * StartServer instance is used as a MessageRecipient and reacts to receiving an
 * instance of a StopServer object. &lt;br&gt;
 * &lt;br&gt;
 * Note that all user classes need to be present on the server side and that all
 * possible Db4oEmbedded.configure() calls to alter the db4o configuration need
 * to be executed on the client and on the server.
 */
public class StartServer implements ServerSetup, MessageRecipient  {

  /** *//**
   * setting the value to true denotes that the server should be closed
   */
  private boolean stop = false;

  /** *//**
   * starts a db4o server using the configuration from
   * {@link ServerSetup}.
   */
  public static void main(String[] arguments)  {
    new StartServer().runServer();
  }

  // end main

  /** *//**
   * opens the ObjectServer, and waits forever until close() is called or a
   * StopServer message is being received.
   */
  public void runServer()  {
    synchronized (this)  {
      // Using the messaging functionality to redirect all
      // messages to this.processMessage
      ServerConfiguration config = Db4oClientServer.newServerConfiguration();
      config.networking().messageRecipient(this);

      ObjectServer db4oServer = Db4oClientServer.openServer(
          config, FILE, PORT);
      db4oServer.grantAccess(USER, PASS);

      
      // to identify the thread in a debugger
      Thread.currentThread().setName(this.getClass().getName());

      // We only need low priority since the db4o server has
      // it's own thread.
      Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
      try  {
        if (!stop)  {
          // wait forever for notify() from close()
          this.wait(Long.MAX_VALUE);
        }
      } catch (Exception e)  {
        e.printStackTrace();
      }
      db4oServer.close();
    }
  }

  // end runServer

  /** *//**
   * messaging callback
   * 
   * @see com.db4o.messaging.MessageRecipient#processMessage(ObjectContainer,
   *      Object)
   */
  public void processMessage(MessageContext context, Object message)  {
    if (message instanceof StopServer)  {
      close();
    }
  }

  // end processMessage

  /** *//**
   * closes this server.
   */
  public void close()  {
    synchronized (this)  {
      stop = true;
      this.notify();
    }
  }
  // end close
}</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <P>And last but not least, the client that stops the server.</P>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">StopServer.java
/**//* Copyright (C) 2007 Versant Inc. http://www.db4o.com */
package com.db4odoc.clientserver;

import com.db4o.*;
import com.db4o.cs.Db4oClientServer;
import com.db4o.messaging.*;

/** *//**
 * stops the db4o Server started with {@link StartServer}. &lt;br&gt;
 * &lt;br&gt;
 * This is done by opening a client connection to the server and by sending a
 * StopServer object as a message. {@link StartServer} will react in it's
 * processMessage method.
 */
public class StopServer implements ServerSetup  {

  /** *//**
   * stops a db4o Server started with StartServer.
   * 
   * @throws Exception
   */
  public static void main(String[] args)  {
    ObjectContainer objectContainer = null;
    try  {

      // connect to the server
      objectContainer = Db4oClientServer.openClient(Db4oClientServer
          .newClientConfiguration(), HOST, PORT, USER, PASS);

    } catch (Exception e)  {
      e.printStackTrace();
    }

    if (objectContainer != null)  {

      // get the messageSender for the ObjectContainer
      MessageSender messageSender = objectContainer.ext().configure()
          .clientServer().getMessageSender();

      // send an instance of a StopServer object
      messageSender.send(new StopServer());

      // close the ObjectContainer
      objectContainer.close();
    }
  }
  // end main
}</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <P>Keywords:</P>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="../clientserverjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>