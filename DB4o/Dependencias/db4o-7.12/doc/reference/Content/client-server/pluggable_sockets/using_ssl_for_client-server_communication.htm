<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Client-Server|Pluggable Sockets" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Using SSL For Client-Server Communication			</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#client-server/pluggable_sockets/using_ssl_for_client-server_communication.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../client-server.htm">Client-Server</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../pluggable_sockets.htm">Pluggable Sockets</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Using SSL For Client-Server Communication</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor163"></a>Using SSL For Client-Server Communication</h1>
        <p>With the default settings db4o client-server communication is not encrypted and thus can potentially be a dangerous security hole. This can be fixed with a <a href="../pluggable_sockets.htm">new pluggable socket</a> client/server implementation. Let's look at a simple example - we will use SSL protocol to protect our communication channel.</p>
        <p>Basically the task is to create a NativeSocketFactory implementation that will create sockets able to communicate through an encrypted channel. In Java these would be SSLServerSocket and SSLSocket.</p>
        <pre class="prettyprint" xml:space="preserve">SecureSocketFactory.java
/**//* Copyright (C) 2007  Versant Inc.  http://www.db4o.com */
package com.db4odoc.ssl;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import javax.net.ssl.SSLContext;

import com.db4o.config.NativeSocketFactory;

public class SecureSocketFactory implements NativeSocketFactory  {

  private SSLContext _context;

  public SecureSocketFactory(SSLContext context)  {
    _context = context;
  }

  public ServerSocket createServerSocket(int port) throws IOException  {
    System.out.println("SERVER on " + port);
    return _context.getServerSocketFactory().createServerSocket(port);
  }

  public Socket createSocket(String hostName, int port) throws IOException  {
    System.out.println("CLIENT on " + port);
    return _context.getSocketFactory().createSocket(hostName, port);
  }

  public Object deepClone(Object context)  {
    return this;
  }

}</pre>
        <p>In order for this class to work correctly we need to provide a correctly initialized SSLContext. For those who are not familiar with Java SSL implementation it is recommended to get acquainted with Java documentation for SSLContext, TrustManager, KeyStore and KeyManagerFactory APIs.</p>
        <p><a name="kanchor164"></a>For encryption purposes we will need to create a new keystore. This can be done with the following command:</p>
        <p><code>keytool -genkey -keystore SSLcert -storepass password</code>
        </p>
        <p>This command creates a file SSLcert, which contains a keystore protected by "password" password. For a test keystore you can provide any answers to the keytool questions and leave the key password the same as the keystore password. For easy access copy the SSLcert file into your projects directory.</p>
        <p>Now we are ready to create a SecureSocketFactory</p>
        <pre class="prettyprint" xml:space="preserve">SSLSocketsExample.java: createSecureSocketFactory
private static SecureSocketFactory createSecureSocketFactory() throws Exception {
    SSLContext sc;
    
    //Create a trust manager that does not validate certificate chains
      TrustManager[] trustAllCerts = createTrustManager();
      
      // Install the all-trusting trust manager
    sc = SSLContext.getInstance("SSLv3");
    KeyStore ks = KeyStore.getInstance(KEYSTORE_<span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../implementation_strategies/ids_and_uuids/internal_ids.htm">ID<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span>);
      ks.load(new FileInputStream(KEYSTORE_PATH), null);
      KeyManagerFactory kmf = KeyManagerFactory.getInstance( 
KeyManagerFactory.getDefaultAlgorithm() );
      kmf.init( ks, KEYSTORE_PASSWORD.toCharArray());
      
      sc.init(kmf.getKeyManagers(), trustAllCerts, new java.security.SecureRandom());
      return new SecureSocketFactory(sc);
  }</pre>
        <pre class="prettyprint" xml:space="preserve">SSLSocketsExample.java: createTrustManager
private static TrustManager[] createTrustManager() {
    return new TrustManager[] {
            new X509TrustManager()  {
                public java.security.cert.X509Certificate[] getAcceptedIssuers()  {
                    return null;
                }
                public void checkClientTrusted(
                    java.security.cert.X509Certificate[] certs, String authType)  {
                }
                public void checkServerTrusted(
                    java.security.cert.X509Certificate[] certs, String authType)  {
                }
            }
        };
  }</pre>
        <p>Starting a server and opening client connections with the new socket factory is as simple as usual:</p>
        <pre class="prettyprint" xml:space="preserve">SSLSocketsExample.java: main
public static void main(String[] args) throws Exception  {
    
      // Create a SecureSocketFactory for the SSL context
    socketFactory = createSecureSocketFactory();
    
    Configuration config = Db4o.newConfiguration();
    ObjectServer db4oServer = Db4o.openServer(config, FILE, PORT,
        socketFactory);
    db4oServer.grantAccess(USER, PASSWORD);
    try  {
      storeObjectsRemotely(HOST, PORT, USER, PASSWORD);
      queryRemoteServer(HOST, PORT, USER, PASSWORD);
    } finally  {
      db4oServer.close();
    }
  }</pre>
        <pre class="prettyprint" xml:space="preserve">SSLSocketsExample.java: storeObjectsRemotely
private static void storeObjectsRemotely(String host, 
int port,String user,String password) throws IOException  {
    Configuration config = Db4o.newConfiguration();
        ObjectContainer client=Db4o.openClient(config, 
"localhost",port,user,password, socketFactory);
        Pilot pilot = new Pilot("Fernando Alonso", 89);
        client.store(pilot);
        client.close();
    }</pre>
        <pre class="prettyprint" xml:space="preserve">SSLSocketsExample.java: queryRemoteServer
private static void queryRemoteServer(String host, int port,String user,String password) throws IOException  {
    Configuration config = Db4o.newConfiguration();
        ObjectContainer client=Db4o.openClient(config, "localhost",port,user,password, socketFactory);
        listResult(client.queryByExample(new Pilot(null, 0)));
        client.close();
    }</pre>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="ssljava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>