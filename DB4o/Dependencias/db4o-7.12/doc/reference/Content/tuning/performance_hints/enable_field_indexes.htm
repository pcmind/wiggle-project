<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Tuning|Performance Hints" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Enable Field Indexes	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#tuning/performance_hints/enable_field_indexes.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../tuning.htm">Tuning</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../performance_hints.htm">Performance Hints</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Enable Field Indexes</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor138"></a><a name="kanchor139"></a>Enable Field Indexes</h1>
        <p>For class Car with field "pilot":</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <p>Java: </p>
            <p><code>Db4o.configure().objectClass(Car.class).objectField("pilot").indexed(true)</code>
            </p>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" /><a name="Advantage"></a>
        <h2>Advantage</h2>
        <p>The fastest way to improve the performance of your queries is to enable indexing on some of your class's key fields. You can read how to do it in <a href="../indexing.htm">Indexing</a> chapter of this documentation.</p>
        <p>Further step of index tuning is to optimize indexes for Class.Field1.Field2 access. What will give us the best performance:</p>
        <ul>
            <li value="1">index on Field1;</li>
            <li value="2">index on Field2;</li>
            <li value="3">index on both fields?</li>
        </ul>
        <p>To find the answer let's consider classes Car and Pilot from the previous chapters. In order to see indexing influence we will put 10000 new cars in our storage:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">IndexedExample.java: fillUpDB
private static void fillUpDB() {
        new File(DB4O_FILE_NAME).delete();
        ObjectContainer container=Db4o.openFile(DB4O_FILE_NAME);
        try  {
          for (int i=0; i&lt;10000;i++) {
          AddCar(container,i);
        }
    }
        finally  {
            container.close();
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">IndexedExample.java: addCar
private static void AddCar(ObjectContainer container, int points)
   {
    Car car = new Car("BMW");
    car.setPilot(new Pilot("Tester", points));
    container.store(car);
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>Now we have lots of similar cars differing only in the amount of pilots' points - that will be our constraint for the query.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">IndexedExample.java: noIndex
private static void noIndex()  {
      ObjectContainer container=Db4o.openFile(DB4O_FILE_NAME);
        try  {
        Query query = container.query();
      query.constrain(Car.class);
      query.descend("pilot").descend("points").constrain(new Integer(99));

      long t1 = System.currentTimeMillis();
      ObjectSet  result = query.execute();
      long t2 = System.currentTimeMillis();
      long  diff = t2 - t1;
      System.out.println("Test 1: no indexes");
      System.out.println("Execution time="+diff + " ms");
      listResult(result);
        }
        finally  {
            container.close();
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>You can check execution time on your workstation using interactive version of this tutorial.</p>
        <p>Let's create index for pilots and their points and test the same query again:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">IndexedExample.java: fullIndex
private static void fullIndex()  {
      Configuration configuration = Db4o.newConfiguration();
      configuration.objectClass(Car.class).objectField("pilot").indexed(true);
      configuration.objectClass(Pilot.class).objectField("points").indexed(true);
        ObjectContainer container=Db4o.openFile(configuration, DB4O_FILE_NAME);
        try  {
        Query query = container.query();
      query.constrain(Car.class);
      query.descend("pilot").descend("points").constrain(new Integer(99));

      long t1 = System.currentTimeMillis();
      ObjectSet  result = query.execute();
      long t2 = System.currentTimeMillis();
      long  diff = t2 - t1;
      System.out.println("Test 2: index on pilot and points");
      System.out.println("Execution time="+diff + " ms");
      listResult(result);
        }
        finally  {
            container.close();
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>That result is considerably better and proves the power of indexing.</p>
        <p>But do we really need 2 indexes? Will single pilot or points index suffice? Let's test this as well:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">IndexedExample.java: pilotIndex
private static void pilotIndex()  {
      Configuration configuration = Db4o.newConfiguration();
      configuration.objectClass(Car.class).objectField("pilot").indexed(true);
      configuration.objectClass(Pilot.class).objectField("points").indexed(false);
        ObjectContainer container=Db4o.openFile(configuration, DB4O_FILE_NAME);
        try  {
        Query query = container.query();
      query.constrain(Car.class);
      query.descend("pilot").descend("points").constrain(new Integer(99));

      long t1 = System.currentTimeMillis();
      ObjectSet  result = query.execute();
      long t2 = System.currentTimeMillis();
      long  diff = t2 - t1;
      System.out.println("Test 3: index on pilot");
      System.out.println("Execution time="+diff + " ms");
      listResult(result);
        }
        finally  {
            container.close();
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">IndexedExample.java: pointsIndex
private static void pointsIndex()  {
      Configuration configuration = Db4o.newConfiguration();
      configuration.objectClass(Car.class).objectField("pilot").indexed(false);
      configuration.objectClass(Pilot.class).objectField("points").indexed(true);
        ObjectContainer container=Db4o.openFile(configuration, DB4O_FILE_NAME);
        try  {
        Query query = container.query();
      query.constrain(Car.class);
      query.descend("pilot").descend("points").constrain(new Integer(99));

      long t1 = System.currentTimeMillis();
      ObjectSet  result = query.execute();
      long t2 = System.currentTimeMillis();
      long  diff = t2 - t1;
      System.out.println("Test 4: index on points");
      System.out.println("Execution time="+diff + " ms");
      listResult(result);
        }
        finally  {
            container.close();
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>Single index does not increase query performance on second level fields.</p>
        <p>To maximize retrieval performance on encapsulated fields of different levels of enclosure</p>
        <p>Class.Field1.Field2.Field3(.FieldN)</p>
        <p>indexes for each field level should be created:</p>
        <p>Class.Field1.Indexed(true) </p>
        <p>Field1Class.Field2.Indexed(true)</p>
        <p>Field2Class.Field3.Indexed(true)</p>
        <p>. . .</p>
        <p>Field(N-1)Class.FieldN.Indexed(true)</p><a name="Alternate Strategies"></a>
        <h2>Alternate Strategies</h2>
        <p>Field indexes dramatically improve query performance but they may considerably reduce storage and update performance. The best way to decide where to put the indexes is to test them on completed application with typical data load.</p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>