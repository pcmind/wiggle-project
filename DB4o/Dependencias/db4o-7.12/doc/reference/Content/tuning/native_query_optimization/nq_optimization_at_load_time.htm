<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Tuning|Native Query Optimization" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>NQ Optimization At Load Time	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#tuning/native_query_optimization/nq_optimization_at_load_time.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../tuning.htm">Tuning</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../native_query_optimization.htm">Native Query Optimization</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">NQ Optimization At Load Time	</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor150"></a>NQ Optimization At Load Time</h1>
        <p><b>Note: This will not work with JDK1.1.</b>
        </p>
        <p><span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../Basic_Concepts/native_query_concepts.htm">Native Query<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> predicates can be optimized when they are loaded into JVM. In order to do that you should make use of db4o <a href="../../implementation_strategies/enhancement_tools.htm">Enhancement Tools</a>. </p>
        <p>The idea is very simple: </p>
        <ul>
            <li value="1">you create your application without any worries about <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../Basic_Concepts/native_query_concepts.htm">NQ<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> optimization</li>
            <li value="2">when the application is ready, you use a special starter class, which calls a special classloader to instrument your predicates and start the application.</li>
        </ul>
        <p>Let's look how this is done on an example. We will use a well-known <a href="nq_optimization_at_load_time/pilot.htm">Pilot</a> class, store it and use NQ to retrieve it:</p>
        <pre class="prettyprint" xml:space="preserve">NQExample.java: main
public static void main(String[] args)  {
    storePilots();
    selectPilot5Points();
      }</pre>
        <pre class="prettyprint" xml:space="preserve">NQExample.java: storePilots
private static void storePilots()  {
    new File(DB4O_FILE_NAME).delete();
    ObjectContainer container = database(configureNQ());
    if (container != null)  {
      try  {
        Pilot pilot;
        for (int i = 0; i &lt; OBJECT_COUNT; i++)  {
          pilot = new Pilot("Test Pilot #" + i, i);
          container.store(pilot);
        }
        for (int i = 0; i &lt; OBJECT_COUNT; i++)  {
          pilot = new Pilot("Professional Pilot #" + (i + 10), i + 10);
          container.store(pilot);
        }
        container.commit();
      } catch (Db4oException ex)  {
        System.out.println("Db4o Exception: " + ex.getMessage());
      } catch (Exception ex)  {
        System.out.println("System Exception: " + ex.getMessage());
      } finally  {
        closeDatabase();
      }
    }
  }</pre>
        <pre class="prettyprint" xml:space="preserve">NQExample.java: selectPilot5Points
private static void selectPilot5Points()  {
    ObjectContainer container = database(configureNQ());
    if (container != null)  {
      try  {
        List&lt;Pilot&gt; result = container.query(new Predicate&lt;Pilot&gt;()  {
          public boolean match(Pilot pilot)  {
            // pilots with 5 points are included in the
            // result
            return pilot.getPoints() == 5;
          }
        });
        listResult(result);
      } catch (Exception ex)  {
        System.out.println("System Exception: " + ex.getMessage());
      } finally  {
        closeDatabase();
      }
    }
  }</pre>
        <p>We will need to create a starter class, which will call the main method of the NQExample:</p>
        <pre class="prettyprint" xml:space="preserve">NQEnhancedStarter.java: main
public static void main(String[] args) throws Exception  {
    // Create class filter to point to the predicates to be optimized
    ClassFilter filter = new ByNameClassFilter("com.db4odoc.nqoptimize.", true);
    // Create NQ optimization class edit
    BloatClassEdit[] edits =  { new TranslateNQToSODAEdit()};
    URL[] urls =  { new File("/work/workspaces/db4o/nqtest/bin").
toURI().toURL() };
    // launch the application using the class edit and the filter
    Db4oInstrumentationLauncher.launch(edits, urls, 
NQExample.class.getName(), new String[] {});
  }</pre>
        <p>That's all. Now you can run your application using NQEnhancedStarter and all the predicated will be optimized while they are loaded. This will also save time on optimization at runtime. </p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>