<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Tuning|Configuration|Freespace Configuration" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>FreespaceFiller Example	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#tuning/configuration/freespace_configuration/freespacefiller_example.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../tuning.htm">Tuning</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../configuration.htm">Configuration</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../freespace_configuration.htm">Freespace Configuration</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Freespacefiller Example</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>FreespaceFiller Example</h1>
        <p>First of
all let's create a database and have a look at the resultant file:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">FreespaceFillerExample.java: Item
private static class Item 
   {
    String name;
    String description;
    
    public Item(String name, String description) {
      this.name = name;
      this.description = description;
    }
    
    @Override
    public String toString() {
      return String.format("%s, %s", name, description);
    }
  }</pre>
            <pre class="prettyprint" xml:space="preserve">FreespaceFillerExample.java: createDatabase
private static void createDatabase(EmbeddedConfiguration config)  {
    new File(DB4O_FILE_NAME).delete();

    ObjectContainer container = Db4oEmbedded.openFile(config, DB4O_FILE_NAME);
    try  {
      Item item;
      for (int i = 0; i &lt; OBJECT_COUNT; i++)  {
        item = new Item("Title" + i, "Just a description");
        container.store(item);
      }
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>So, we've
stored lots of Item objects, each of them has 2 string fields. Let's open
reference.db4o file with any text editor and check if we can see some useful
information:</p>
        <p>
            <img src="freespacefiller_example/before1.jpg" />
        </p>
        <p>From the
image above you can see that all the string fields are actually readable without
any special software.</p>
        <p>Now, lets
create a default configuration - like Db4oEmbedded.newConfiguration() for Java or Db4oEmbedded.NewConfiguration()<b></b>for .NET - and delete all the objects:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">FreespaceFillerExample.java: deleteObjects
private static void deleteObjects(EmbeddedConfiguration config) {
    ObjectContainer container = Db4oEmbedded.openFile(config, DB4O_FILE_NAME);
    try  {
      List&lt;Item&gt; result = container.queryByExample(Item.class);
      for (Item item :result) {
        container.delete(item);
      }
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>If you will
open the database file in a text editor again - you won't see much change - the
database file is still the same size and all the string information from the
Item objects is still there. </p>
        <p>We can make
the deletion more effective by creating a custom configuration with a freespace
filler implementation:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">FreespaceFillerExample.java: getConfig
private static EmbeddedConfiguration getConfig()  {
    EmbeddedConfiguration config = Db4oEmbedded.newConfiguration();
    config.file().freespace().freespaceFiller(new FreespaceFiller() {

      @Override
      public void fill(BlockAwareBinWindow io) throws IOException  {
        Random r = new Random();
        byte[] data = new byte[io.length()];
        r.nextBytes(data);
        io.write(0, data);
      }
      
    });
    return config;
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>You can see
that the implementation is very simple - you only need to implement one method:
fill. The parameter gives you a BlockAwareBinWindow and the implementation must
create a byte array of the requested size to fill it in. In our implementation
we use random bytes.</p>
        <p>Now, let's create
the database again and run delete objects with the new configuration and look
at the database file again.</p>
        <p>
            <img src="freespacefiller_example/after1.jpg" />
        </p>
        <p>Now instead
of the real data we can only see some random bytes.</p>
        <p>Don't
forget that custom freespace filler slows down IO operations.</p>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>