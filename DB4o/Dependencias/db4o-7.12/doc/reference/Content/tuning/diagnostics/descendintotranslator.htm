<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Tuning|Diagnostics" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>DescendIntoTranslator	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#tuning/diagnostics/descendintotranslator.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../tuning.htm">Tuning</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../diagnostics.htm">Diagnostics</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">DescendIntoTranslator</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>DescendIntoTranslator</h1>
        <p><span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../implementation_strategies/translators.htm">Translator<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> API provides a special way of storing and retrieving objects. In fact the actual class is not stored in the database. Instead the information from that class is stored in a primitive object (object array) and the class is recreated during instantiation or activation.</p>
        <p>Let's look how queries handle translated classes. Diagnostics system will help us to see, what is going on.</p>
        <p>In our example class Car is configured to be saved and retrieved with CarTranslator class. CarTranslator saves only car model information appending it with the production date.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">CarTranslator.java
/**Copyright (C) 2004 - 2009 Versant Inc. http://www.db4o.com */
package com.db4odoc.diagnostics;

import com.db4o.*;
import com.db4o.config.*;

public class CarTranslator 
    implements ObjectConstructor  {
  public Object onStore(ObjectContainer container,
      Object applicationObject)  {
    Car car =(Car)applicationObject;

    String fullModel;
    if (hasYear(car.getModel())) {
      fullModel = car.getModel();
    } else  {
      fullModel = car.getModel() + getYear(car.getModel());
    }
    return new Object[] {fullModel};
  }

  private String getYear(String carModel) {
    if (carModel.equals("BMW")) {
      return " 2002";
    } else  {
      return " 1999";
    }
    
  }
  
  private boolean hasYear(String carModel) {
    return false;
  }
  
  public Object onInstantiate(ObjectContainer container, Object storedObject)  {
    Object[] raw=(Object[])storedObject;
    String model=(String)raw[0];
    return new Car(model);
  }

  public void onActivate(ObjectContainer container, 
      Object applicationObject, Object storedObject)  {
  }

  public Class storedClass()  {
    return Object[].class;
  }
}</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>Let's clean our database and store 2 cars:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">DiagnosticExample.java: storeTranslatedCars
private static void storeTranslatedCars()  {
      new File(DB4O_FILE_NAME).delete();
      
      EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
      configuration.common().objectClass(Car.class).translate(new CarTranslator());
      configuration.common().objectClass(Car.class).callConstructor(true);
      
    ObjectContainer container = Db4oEmbedded.openFile(configuration, DB4O_FILE_NAME);
    try  {
      Car car1 = new Car("BMW");
      System.out.println("ORIGINAL: " + car1);
      container.store(car1);
      Car car2 = new Car("Ferrari");
      System.out.println("ORIGINAL: " + car2);
      container.store(car2);
    } catch (Exception exc)  {
      System.out.println(exc.toString());
      return;
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>We can check the contents of our database with the following method:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">DiagnosticExample.java: retrieveTranslatedCars
private static void retrieveTranslatedCars()  {
      EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
      configuration.common().diagnostic().addListener(new TranslatorDiagListener());
      configuration.common().objectClass(Car.class).translate(new CarTranslator());
      configuration.common().objectClass(Car.class).callConstructor(true);
      ObjectContainer container = Db4oEmbedded.openFile(configuration, DB4O_FILE_NAME);
    try  {
      List result = container.query(Car.class);
      listResult(result);
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>TranslatorDiagListener is implemented to help us filter only those diagnostic messages, that concern translated classes (filtering diagnostics messages is explained in <a href="diagnostic_messages_filter.htm">Diagnostic Messages Filter</a> chapter).</p>
        <p>We did not get any diagnostic messages here and the result shows the stored cars with extended model values.</p>
        <p>To test Native Queries we will use the predicate, which retrieves only cars, produced in year 2002:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">NewCarModel.java
/** Copyright (C) 2004 - 2009 Versant Inc. http://www.db4o.com */
package com.db4odoc.diagnostics;

import com.db4o.query.Predicate;

public class  NewCarModel  extends Predicate&lt;Car&gt;  {
  public boolean match(Car car)  {
    return ((Car)car).getModel().endsWith("2002");
  }
}</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">DiagnosticExample.java: retrieveTranslatedCarsNQ
private static void retrieveTranslatedCarsNQ()  {
      EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
      configuration.common().diagnostic().addListener(new TranslatorDiagListener());
      configuration.common().objectClass(Car.class).translate(new CarTranslator());
      configuration.common().objectClass(Car.class).callConstructor(true);
      ObjectContainer container = Db4oEmbedded.openFile(configuration, DB4O_FILE_NAME);
    try  {
      List  result = container.query(new NewCarModel());
      listResult(result);
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>A diagnostic message should appear pointing out, that the query is not correct in our case. Let's try  to correct it using unoptimized <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../Basic_Concepts/native_query_concepts.htm">NQ<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> and evaluations.</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">DiagnosticExample.java: retrieveTranslatedCarsNQUnopt
private static void retrieveTranslatedCarsNQUnopt()  {
      EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
      configuration.common().optimizeNativeQueries(false);
      configuration.common().diagnostic().addListener(new TranslatorDiagListener());
      configuration.common().objectClass(Car.class).translate(new CarTranslator());
      configuration.common().objectClass(Car.class).callConstructor(true);
      ObjectContainer container = Db4oEmbedded.openFile(configuration, DB4O_FILE_NAME);
    try  {
      List  result = container.query(new NewCarModel());
      listResult(result);
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>We will use simple evaluation to check our cars:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">CarEvaluation.java
/** Copyright (C) 2004 - 2009 Versant Inc. http://www.db4o.com */
package com.db4odoc.diagnostics;

import com.db4o.query.*;

public class CarEvaluation implements Evaluation  {
  public void evaluate(Candidate candidate)
   {
    Car car=(Car)candidate.getObject();
    candidate.include(car.getModel().endsWith("2002"));
  }
}</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">DiagnosticExample.java: retrieveTranslatedCarsSODAEv
private static void retrieveTranslatedCarsSODAEv()  {
      EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
      configuration.common().diagnostic().addListener(new TranslatorDiagListener());
      configuration.common().objectClass(Car.class).translate(new CarTranslator());
      configuration.common().objectClass(Car.class).callConstructor(true);
      ObjectContainer container = Db4oEmbedded.openFile(configuration, DB4O_FILE_NAME);
    try  {
      Query query = container.query();
      query.constrain(Car.class);
      query.constrain(new CarEvaluation());
      List result = query.execute();
      listResult(result);
    } finally  {
      container.close();
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:cs" />
        <p MadCap:conditions="Global.Primary:vb" />
        <p>In both cases we the results are correct. <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../Basic_Concepts/native_query_concepts.htm">Native Query<img style="border: none;margin-left: 5px;" src="../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> optimization cannot be used with the translated classes, because the actual values of the translated fields are only known after instantiation and activation. That also means that translated classes can have a considerable impact on database performance and should be used with care.</p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="diagnosticsjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>