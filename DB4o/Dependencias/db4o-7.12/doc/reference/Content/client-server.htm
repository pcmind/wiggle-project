<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Client-Server	</title>
        <script type="text/javascript">/* <![CDATA[ */
			window.onload = function(){
                             prettyPrint();
			};
                /* ]]> */</script>
        <link href="SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="SkinSupport/MadCapAll.js">
        </script>
        <script src="Resources/Code/prettify.js">
        </script>
        <script src="Resources/Code/lang-vb.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../index_CSH.html#client-server.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><span class="MCBreadcrumbs">Client-Server	</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1><a name="kanchor156"></a>Client-Server</h1>
        <p>Client/Server mode is de-facto standard for any modern database. However there is a big difference between relational and object databases functionality in client-server mode. </p>
        <p>With <span class="MCTextPopup"><a href="javascript:void(0);" class="MCTextPopupSpot" onclick="FMCTextPopup( event, this ); return false;">RDBMS<img style="border: none;margin-left: 5px;" src="SkinSupport/ExpandingClosed.gif" MadCap:altsrc="SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( 'SkinSupport/ExpandingOpen.gif' ); }" /></a><span class="MCTextPopupBody" style="display: none; ">Relational Database Management System</span></span> everything is pretty straightforward: data is kept on a server and SQL commands generated on a client are used to operate them. </p>
        <p>In db4o world SQL is an alien and querying syntax is based on class definitions. Therefore class libraries synchronization between client and server becomes essential. </p>
        <p>More Reading:<ul><li value="1"><p><a href="client-server/embedded.htm">Embedded</a></p></li><li value="2"><p><a href="client-server/networked.htm">Networked</a></p></li><li value="3"><p><a href="client-server/native_queries_in_client-server_mode.htm" MadCap:conditions="Primary.Java">Native Queries In Client-Server Mode</a></p></li><li value="4"><p><a href="client-server/server_without_persistent_classes_deployed.htm">Server Without Persistent Classes Deployed</a></p></li><li value="5"><p><a href="client-server/semaphores.htm">Semaphores</a></p></li><li value="6"><p><a href="client-server/pluggable_sockets.htm">Pluggable Sockets</a></p></li><li value="7"><p><a href="client-server/remote_code_execution.htm">Remote Code Execution</a></p></li><li value="8"><p><a href="client-server/concurrency_control.htm">Concurrency Control</a></p></li><li value="9"><p><a href="client-server/messaging.htm">Messaging</a></p></li><li value="10"><p><a href="client-server/batch_mode.htm">Batch Mode</a></p></li></ul></p>
        <script type="text/javascript" src="SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>